import java.util.ArrayList;
import java.util.List;
import java.util.Random;

public class kthread extends Thread{

    int start;
    int end;
    int threadCount;
    int n;
    int k;
    List<Integer> solution;

    public kthread(int s, int e, int tc, int n, int k){
        this.start = s;
        this.end = e;
        this.threadCount = tc;
        this.n = n;
        this.k = k;
        this.solution = new ArrayList<>();
    }

    private void solution_to_color(int number){
        this.solution.clear();
        for(int i=0;i<n;i++){
            solution.add(number % k);
            number /= k;
        }
    }

    private boolean checkSolution(){
        Random rd = new Random();
        return rd.nextInt(5) == 0;
    }

    @Override
    public void run(){

        for(int number = start; number <= end; number += threadCount){
            solution_to_color(number);
            System.out.printf("Number generated by thread %d : %d -> %s\n", start, number, solution.toString());
            if (checkSolution()){
                System.out.println("  **** Solution: " + solution.toString() + " *** generated by thread -> " + start);
                return;
            }
        }
        System.out.println("No solution for thread " + start + " was found.");
    }
}
