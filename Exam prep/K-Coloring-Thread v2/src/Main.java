import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.TimeUnit;

public class Main {

    private static List<Integer> solution_to_color(int number, int n, int k){
        List<Integer> solution = new ArrayList<>();
        for(int i=0;i<n;i++){
            solution.add(number % k);
            number /= k;
        }
        return solution;
    }

    public static void main(String[] args) throws InterruptedException {
        ExecutorService executorService = Executors.newFixedThreadPool(10);
        int n = 5;
        int k = 3;

        int maxValue = 1;
        int threadCount = 3;

        for(int i=0;i<n;i++){
            maxValue*=k;
        }

        for(int i=0;i<threadCount;i++){
            int finalMaxValue = maxValue;
            int finalI = i;
            executorService.submit(
                    ()->{
                        for(int number = finalI; number <= finalMaxValue; number += threadCount){
                            List<Integer> sol = solution_to_color(number, n, k);
                            System.out.printf("Number generated by thread %d : %d -> %s\n", finalI, number, sol.toString());
                        }
                    }
            );
        }

        executorService.shutdown();
        executorService.awaitTermination(300, TimeUnit.SECONDS);

    }
}
